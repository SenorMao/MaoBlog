---
title: "Week_6"
author: "Emmanuel Pascual"
date: "2023-02-06"
categories: [RLearning, Code, Data]
image: "dataPic.jpg"
---

For this Module we will be lookin at several tweets and making descriptive analysis' using R libraries:

5.1

```{r setup, include=FALSE}
library(tidyverse)   # data wrangling functions
library(rtweet)      # for searching tweets
library(kableExtra)  # for nice tables
```

Download the data for this chapter (ncod_tweets.rds) tweets \<- readRDS("ncod_tweets.rds")

5.2



Make sure to save your data because there are systems in place to stop you from receiving new data constantly or too much data I forget.

```{r}
tweets <- readRDS("data/ncod_tweets.rds")
saveRDS(tweets, file = "data/ncod_tweets.rds")


```

We only need to make a variable for this instance I will name it "favorite_summary"

```{r}
favorite_summary <- summarise(tweets, # name of the data table
                               mean_favs = mean(favorite_count),
                               median_favs = median(favorite_count),
                               min_favs = min(favorite_count),
                               max_favs = max(favorite_count))

    knitr::kable(favorite_summary) #print output , weird syntax man
```

Similar to GGplots we are able to add more and more categories of statistical analysis by adding more command for example:

```{r}
favourite_summary <- summarise(tweets,
                               mean_favs = mean(favorite_count),
                               median_favs = median(favorite_count),
                               min_favs = min(favorite_count),
                               max_favs = max(favorite_count),
                               sd_favs = sd(favorite_count),
                               mean_RTs = mean(retweet_count),
                               median_RTs = median(retweet_count),
                               min_RTs = min(retweet_count),
                               max_RTs = max(retweet_count),
                               sd_RTs = sd(favorite_count))

    knitr::kable(favourite_summary)
```

To create histograms we will be looking at the ggplot libary and below is an example histogram:

```{r}
ggplot(tweets, aes(x = favorite_count)) + 
  geom_histogram(bins = 25) + 
  scale_x_continuous(trans = "pseudo_log", 
                     breaks = c(0, 1, 10, 100, 1000, 10000))

```

The \$ operator:

This operator is a little nifty in the sense that it will isolate a specific data point that we need, For example let's look at the example code provided by Applied Data Skills:

```{r}
tweet_summary <- summarise(tweets,
                               mean_favs = mean(favorite_count),
                               median_favs = median(favorite_count),
                               min_favs = min(favorite_count),
                               max_favs = max(favorite_count),
                               sd_favs = sd(favorite_count),
                               mean_RTs = mean(retweet_count),
                               median_RTs = median(retweet_count),
                               min_RTs = min(retweet_count),
                               max_RTs = max(retweet_count),
                               sd_RTs = sd(favorite_count))

tweet_summary$mean_favs
tweet_summary$sd_favs
tweet_summary$sd_RTs
```

On the left side of \$ we are referencing the table and the right side is the the item we are calling for observation. But we can actually use vectors to isolate a specific data point.

```{r}
tweets$source[6] # select one observation
tweets$display_text_width[c(10,15,20)] # select multiple with c()

```

GROUPING! Using the grouping function we are able to select specific parts of these tables to create new tables!

```{r}
   tweets_grouped <- tweets %>%
      group_by(verified)

    verified <- tweets_grouped %>%
      summarise(count = n(),
                mean_favs = mean(favorite_count),
                mean_retweets = mean(retweet_count)) %>%
      ungroup()
    verified

```

Filter and Mutate

filter(): keeps observations (rows) according to specified criteria, e.g., all values above 5, or all verified users. mutate(): creates new variables (columns), or overwrites existing ones.
