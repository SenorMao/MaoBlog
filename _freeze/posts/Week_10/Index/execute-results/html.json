{
  "hash": "90748bad3d488509fb85244ca0881772",
  "result": {
    "markdown": "---\ntitle: \"Data Tidying\"\nauthor: \"Emmanuel Pascual\"\ndate: \"4/19/2023\"\n---\n\n\nWe will be using TidyVerse for all of our filtering and cleaning of data!\n\n\n\n\n\nWe first must collect our data and this is done by finding the directory for it and summoning it\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_data <- read_csv(\"data/untidy_data.csv\", show_col_types = FALSE) #We are summoning our data! \ntidy_data <- read_csv(\"data/tidy_data.csv\", show_col_types = FALSE)\n```\n:::\n\n\nOnce we have our data nice and imported we are able to create tibbles to fix up how we want to represent that data for instance this first example groups the data by customer id and takes the total of items and stores it into total items as is done with the total_price.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_data %>%\n  group_by(customer_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  ) #This is a tibble that we created changing variable name and taking the values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  customer_id total_items total_price\n        <dbl>       <dbl>       <dbl>\n1           1          20       101. \n2           2           8        37.8\n3           3          14        67.2\n4           4          14        60.6\n5           5          20        98.9\n```\n:::\n\n```{.r .cell-code}\n# select just the customer ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n\nwide_totalprice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  customer_id `2018` `2019` `2020`\n        <dbl>  <dbl>  <dbl>  <dbl>\n1           1   7.82  37.8   55.9 \n2           2   3.91  28.3    5.59\n3           3  15.6   23.6   28.0 \n4           4  39.1    4.72  16.8 \n5           5  11.7   42.5   44.7 \n```\n:::\n\n```{.r .cell-code}\nlong_totalprice <- pivot_longer( #Pivot Longer just make everything longer\n  data = wide_totalprice,\n  cols = `2018`:`2020`,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n\nlong_totalprice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   customer_id year  totalprice\n         <dbl> <chr>      <dbl>\n 1           1 2018        7.82\n 2           1 2019       37.8 \n 3           1 2020       55.9 \n 4           2 2018        3.91\n 5           2 2019       28.3 \n 6           2 2020        5.59\n 7           3 2018       15.6 \n 8           3 2019       23.6 \n 9           3 2020       28.0 \n10           4 2018       39.1 \n11           4 2019        4.72\n12           4 2020       16.8 \n13           5 2018       11.7 \n14           5 2019       42.5 \n15           5 2020       44.7 \n```\n:::\n\n```{.r .cell-code}\nggplot(long_totalprice, aes(x = totalprice, fill = year)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](Index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwide_by_customer <- pivot_wider(\n  data = long_totalprice,\n  id_cols = year, # identifying column(s)\n  names_from = customer_id, # the new column names\n  names_prefix = \"C_\", # prefix for new column names\n  values_from = totalprice # the new column values\n)\n\nwide_by_customer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  year    C_1   C_2   C_3   C_4   C_5\n  <chr> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 2018   7.82  3.91  15.6 39.1   11.7\n2 2019  37.8  28.3   23.6  4.72  42.5\n3 2020  55.9   5.59  28.0 16.8   44.7\n```\n:::\n:::\n\n\nHere we transform data into a different version once again!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\n\nlonger_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 4\n   customer_id category    year value    \n         <dbl> <chr>      <int> <chr>    \n 1           1 itemsprice  2018 2 (3.91) \n 2           1 itemsprice  2019 8 (4.72) \n 3           1 itemsprice  2020 10 (5.59)\n 4           1 totalprice  2018 7.82     \n 5           1 totalprice  2019 37.76    \n 6           1 totalprice  2020 55.9     \n 7           2 itemsprice  2018 1 (3.91) \n 8           2 itemsprice  2019 6 (4.72) \n 9           2 itemsprice  2020 1 (5.59) \n10           2 totalprice  2018 3.91     \n# … with 20 more rows\n```\n:::\n\n```{.r .cell-code}\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\nwider_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 4\n   customer_id  year itemsprice totalprice\n         <dbl> <int> <chr>      <chr>     \n 1           1  2018 2 (3.91)   7.82      \n 2           1  2019 8 (4.72)   37.76     \n 3           1  2020 10 (5.59)  55.9      \n 4           2  2018 1 (3.91)   3.91      \n 5           2  2019 6 (4.72)   28.32     \n 6           2  2020 1 (5.59)   5.59      \n 7           3  2018 4 (3.91)   15.64     \n 8           3  2019 5 (4.72)   23.6      \n 9           3  2020 5 (5.59)   27.95     \n10           4  2018 10 (3.91)  39.1      \n11           4  2019 1 (4.72)   4.72      \n12           4  2020 3 (5.59)   16.77     \n13           5  2018 3 (3.91)   11.73     \n14           5  2019 9 (4.72)   42.48     \n15           5  2020 8 (5.59)   44.72     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n)\n\n# check the data types\nglimpse(mutated_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <chr> \"3.91\", \"4.72\", \"5.59\", \"3.91\", \"4.72\", \"5.59\", \"3.91\",…\n$ totalprice     <chr> \"7.82\", \"37.76\", \"55.9\", \"3.91\", \"28.32\", \"5.59\", \"15.6…\n```\n:::\n\n```{.r .cell-code}\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\n# check the data types\nglimpse(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_data <- read_csv(\"data/untidy_data.csv\", \n                        show_col_types = FALSE)\n\nlonger_data <- pivot_longer(\n  data = untidy_data,\n  cols = itemsprice_2018:totalprice_2020,\n  names_to = c(\"category\", \"year\"),\n  names_sep = \"_\", \n  values_to = \"value\", \n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n) \n\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\nsplit_data <- separate(\n  data = wider_data,\n  col = itemsprice,\n  into = c(\"items\", \"price_per_item\"),\n  sep = \" \", \n  remove = TRUE, \n  convert = TRUE\n) \n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n) \n\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n```\n:::\n:::\n\n\n    Read the data with read_csv()\n        file: from the file at r path(“data/untidy_data.csv”)`,\n        show_col_types: do not show the colukmn types message; and then\n\n    Reshape the data longer with pivot_longer()\n        cols: take the columns from itemsprice_2018 to totalprice_2020,\n        names_to: create new columns called “category” and “year” from the cols header names,\n        names_sep: separate the column names using “_”\n        values_to: create a new column called “value” from the cols values,\n        names_transform: transform the year column to integers,\n        values_transform: transform the value column to characters; and then\n\n    Reshape the data wider with pivot_wider()\n        id_cols: each row should be an observation of a unique customer_id and year,\n        names_from: get the new column names from the values in the category column,\n        values_from: get the new column values from the values in the value column; and then\n\n    Split multiple values in the same column with separate()\n        col: separate the column itemsprice,\n        into: into new columns called “items” and “price_per_item”,\n        sep: separate the values at each ” “,\n        remove: do remove the old column,\n        convert: do convert the new columns into the right data types; and then\n\n    Change a column with mutate()\n\n        price_per_item: replace the existing column price_per_item with the result of a search and replace with str_replace_all():\n            string: the strings to modify come from the price_per_item columns,\n            pattern: search for left or right parentheses,\n            replacement: replace them with ““; and then,\n\n    Fix data types with type_convert()\n        trim_ws: remove spaces, tabs, and line breaks from the start and end of each value\n",
    "supporting": [
      "Index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}