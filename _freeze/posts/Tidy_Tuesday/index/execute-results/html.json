{
  "hash": "cd252134ad7b04db11257457094bb4c5",
  "result": {
    "markdown": "---\ntitle: \"Tidy Tuesday Substitute\"\nauthor: \"Emmanuel Pascual\"\ntoc-title: Contents\ntoc: true\ntoc-depth: 2\ndate: \"2023-05-22\"\ncategories: [Week, Number, Three]\n---\n\n\nThis is a substitute to my final! Hopefully these cute graphs showcase my ability to take a data-set and make some visualizations out of it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\ndata <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk_reference.csv\")\n\n# Create a data visualization\nggplot(data, aes(x = animal_sex, fill = animal_reproductive_condition)) +\n  geom_bar() +\n  labs(x = \"Gender\", y = \"Count\", title = \"Cats: Gender and Spayed Status\") +\n  scale_fill_discrete(name = \"Spayed\")+\n  scale_y_continuous(breaks = seq(0 , 70 , by = 2) )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data, aes(x = animal_sex, y = hrs_indoors, color = animal_reproductive_condition)) +\n  geom_boxplot() +\n  labs(x = \"Gender\", y = \"Time Outside\", title = \"Cats: Time Outside by Gender and Spayed Status\") +\n  scale_fill_discrete(name = \"Spayed\")+\n  scale_y_continuous(breaks = seq(0, 24, by = 2), limits = c(0, 24)) +\n  theme(axis.text.y = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\ncats_uk <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 18215 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): tag_id, study_name\ndbl  (5): event_id, location_long, location_lat, ground_speed, height_above_...\nlgl  (3): visible, algorithm_marked_outlier, manually_marked_outlier\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Read the cats_uk dataset\ncats_uk <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 18215 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): tag_id, study_name\ndbl  (5): event_id, location_long, location_lat, ground_speed, height_above_...\nlgl  (3): visible, algorithm_marked_outlier, manually_marked_outlier\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Create a histogram of ground speed\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\n\n\nbob_ross <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-21/bob_ross.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 403 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): img_src, painting_title, youtube_src, colors, color_hex\ndbl  (4): painting_index, season, episode, num_colors\nlgl (18): Black_Gesso, Bright_Red, Burnt_Umber, Cadmium_Yellow, Dark_Sienna,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Read in the data\nbob_ross <- read_csv(\n  \"https://raw.githubusercontent.com/jwilber/Bob_Ross_Paintings/master/data/bob_ross_paintings.csv\",\n) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 403 Columns: 28\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(5): img_src, painting_title, youtube_src, colors, color_hex dbl (23): ...1,\npainting_index, season, episode, num_colors, Black_Gesso, Br...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nglimpse(bob_ross)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 403\nColumns: 28\n$ ...1             <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ painting_index   <dbl> 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292…\n$ img_src          <chr> \"https://www.twoinchbrush.com/images/painting282.png\"…\n$ painting_title   <chr> \"A Walk in the Woods\", \"Mt. McKinley\", \"Ebony Sunset\"…\n$ season           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,…\n$ episode          <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4…\n$ num_colors       <dbl> 8, 8, 9, 3, 8, 4, 8, 8, 8, 8, 8, 4, 8, 12, 12, 13, 3,…\n$ youtube_src      <chr> \"https://www.youtube.com/embed/oh5p5f5_-7A\", \"https:/…\n$ colors           <chr> \"['Alizarin Crimson', 'Bright Red', 'Cadmium Yellow',…\n$ color_hex        <chr> \"['#4E1500', '#DB0000', '#FFEC00', '#102E3C', '#021E4…\n$ Black_Gesso      <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,…\n$ Bright_Red       <dbl> 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,…\n$ Burnt_Umber      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,…\n$ Cadmium_Yellow   <dbl> 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,…\n$ Dark_Sienna      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Indian_Red       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Indian_Yellow    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ Liquid_Black     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Liquid_Clear     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Midnight_Black   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Phthalo_Blue     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,…\n$ Phthalo_Green    <dbl> 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,…\n$ Prussian_Blue    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Sap_Green        <dbl> 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,…\n$ Titanium_White   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Van_Dyke_Brown   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Yellow_Ochre     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,…\n$ Alizarin_Crimson <dbl> 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,…\n```\n:::\n\n```{.r .cell-code}\n# The first column doesn't contain data that we need, so we can remove it\n\nbob_ross <- select(bob_ross, -1)\n\n# Several columns refer to presence/absence of named colors.\n\nbob_ross <- bob_ross |> \n  mutate(\n    across(Black_Gesso:Alizarin_Crimson, as.logical)\n  )\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Calculate the average number of colors per season\nbob_ross_avg_colors <- bob_ross %>%\n  group_by(season) %>%\n  summarise(avg_colors = mean(num_colors))\n\n# Create a bar plot\n  ggplot(bob_ross_avg_colors, aes(x = season, y = avg_colors)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    labs(x = \"Season\", y = \"Average Number of Colors\", title = \"Average Number of Colors per Season\") +\n    theme_minimal() +\n    scale_fill_manual(values = rainbow(length(bob_ross_avg_colors$season)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  bob_ross_color_counts <- bob_ross %>%\n  group_by(season, colors) %>%\n  summarise(color_count = n()) %>%\n  arrange(season, desc(color_count))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-14/drugs.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1988 Columns: 28\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): category, medicine_name, therapeutic_area, common_name, active_su...\ndbl   (1): revision_number\nlgl   (8): patient_safety, additional_monitoring, generic, biosimilar, condi...\ndttm  (2): first_published, revision_date\ndate  (4): marketing_authorisation_date, date_of_refusal_of_marketing_author...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Required libraries\nlibrary(tidyverse)\nlibrary(readr)\n\n# Read the dataset\ndrugs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-14/drugs.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1988 Columns: 28\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): category, medicine_name, therapeutic_area, common_name, active_su...\ndbl   (1): revision_number\nlgl   (8): patient_safety, additional_monitoring, generic, biosimilar, condi...\ndttm  (2): first_published, revision_date\ndate  (4): marketing_authorisation_date, date_of_refusal_of_marketing_author...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Count the number of drugs in each therapeutic area\ntherapeutic_counts <- drugs %>%\n  group_by(therapeutic_area) %>%\n  summarise(total_drugs = n()) %>%\n  top_n(10, total_drugs) %>%\n  arrange(desc(total_drugs))\n\n# Create a prettier bar plot of the top 10 therapeutic areas\nggplot(therapeutic_counts, aes(x = reorder(therapeutic_area, -total_drugs), y = total_drugs)) +\n  geom_bar(stat = \"identity\", fill = \"#69b3a2\", width = 0.6) +\n  labs(x = \"Therapeutic Area\", y = \"Number of Drugs\", title = \"Top 10 Therapeutic Areas\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),\n        plot.title = element_text(size = 18, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.line = element_line(color = \"black\"),\n        legend.position = \"none\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}