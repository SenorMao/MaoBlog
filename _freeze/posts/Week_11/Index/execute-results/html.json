{
  "hash": "45d1747a003957758aa893ba2d210d2a",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling - Week 11\"\nauthor: \"Emmanuel Pascual\"\ndate: \"4/19/2023\"\n---\n\n\nThis chapter discusses essential functions from the dplyr package. These include: **select, filter, arrange, mutate, summarise, and group_by**. In you blog post demonstrate that you understand and can use each of these functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nbudget <- read_csv(\"data/budget.csv\", show_col_types = FALSE)\n```\n:::\n\n\nOnce we have our data imported this chapter wants us to select the column product and the second coloumn using the paraentaces as a specifier. This is all about Selects!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select single column by name\nproduct_dat <- budget %>% select(product) \n\nproduct_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  product\n  <chr>  \n1 widgets\n2 gadgets\n3 widgets\n4 gadgets\n5 widgets\n6 gadgets\n7 widgets\n8 gadgets\n```\n:::\n\n```{.r .cell-code}\n# select single column by number\nproduct_dat <- budget %>% select(1) \n\nproduct_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  region\n  <chr> \n1 North \n2 North \n3 South \n4 South \n5 East  \n6 East  \n7 West  \n8 West  \n```\n:::\n\n```{.r .cell-code}\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019) #selecting the coloumns that we want!\n\nsales2019 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  region product sales_2019\n  <chr>  <chr>        <dbl>\n1 North  widgets       2129\n2 North  gadgets        723\n3 South  widgets       1123\n4 South  gadgets       2022\n5 East   widgets       -728\n6 East   gadgets       -423\n7 West   widgets        633\n8 West   gadgets       1204\n```\n:::\n\n```{.r .cell-code}\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019) #This selects all column between these two! \n\nsales2019\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  region product sales_2019\n  <chr>  <chr>        <dbl>\n1 North  widgets       2129\n2 North  gadgets        723\n3 South  widgets       1123\n4 South  gadgets       2022\n5 East   widgets       -728\n6 East   gadgets       -423\n7 West   widgets        633\n8 West   gadgets       1204\n```\n:::\n\n```{.r .cell-code}\nregions <- budget %>% select(`Region of Sales` = 1, 3:6)\n\nhead(regions, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  `Region of Sales` sales_2019 sales_2020 expenses_2019 expenses_2020\n  <chr>                  <dbl>      <dbl>         <dbl>         <dbl>\n1 North                   2129       -517           822          -897\n2 North                    723         77          1037          1115\n```\n:::\n:::\n\n\n|      Function | results                                                    |\n|--------------------------------------:|:--------------------------------|\n| starts_with() | select columns that start with a character string          |\n|   ends_with() | select columns that end with a character string            |\n|    contains() | select columns that contain a character string             |\n|   num_range() | select columns with a name that matches the pattern prefix |\n\n\n\n\n*FILTER* \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# everything but the North\nbudget %>% filter(region != \"North\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n\nNow we have seen many examples of filtering using variables that we want to see but what do we do when we want to filter out certain variables, I'll show you that now! \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n\n Arrange() can be useful when preparing data for display in tables. arrange() works on character data where it will sort alphabetically, as well as numeric data where the default is ascending order (smallest to largest). Reverse the order using desc().\n \n\n::: {.cell}\n\n```{.r .cell-code}\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 West   gadgets       1204        426           433        -136 low     low    \n2 South  gadgets       2022       -945          -610         200 low     low    \n3 North  gadgets        723         77          1037        1115 very h… very h…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 South  widgets       1123      -1450          1004         672 high    neutral\n7 North  widgets       2129       -517           822        -897 high    very h…\n8 East   widgets       -728        -51          -801        -342 very l… very l…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\nbudget %>%\n  mutate(region = factor(region, levels = c(\"North\", \"South\", \"East\", \"West\"))) %>%\n  filter(product == \"gadgets\") %>%\n  arrange(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <fct>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  gadgets        723         77          1037        1115 very h… very h…\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   gadgets       -423       -354            94        2036 neutral high   \n4 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## mutate\n\n\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n\nbudget2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 11\n  region   product sales…¹ sales…² expen…³ expen…⁴ satis…⁵ satis…⁶ sales expen…⁷\n  <chr>    <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>   <chr>   <dbl>   <dbl>\n1 North O… widgets    2129    -517     822    -897 high    very h…  1612     -75\n2 North O… gadgets     723      77    1037    1115 very h… very h…   800    2152\n3 South O… widgets    1123   -1450    1004     672 high    neutral  -327    1676\n4 South O… gadgets    2022    -945    -610     200 low     low      1077    -410\n5 East Of… widgets    -728     -51    -801    -342 very l… very l…  -779   -1143\n6 East Of… gadgets    -423    -354      94    2036 neutral high     -777    2130\n7 West Of… widgets     633     790     783    -315 neutral neutral  1423     468\n8 West Of… gadgets    1204     426     433    -136 low     low      1630     297\n# … with 1 more variable: profit <dbl>, and abbreviated variable names\n#   ¹​sales_2019, ²​sales_2020, ³​expenses_2019, ⁴​expenses_2020,\n#   ⁵​satisfaction_2019, ⁶​satisfaction_2020, ⁷​expenses\n```\n:::\n\n```{.r .cell-code}\nbudget3 <- budget %>%\n  mutate(\n    A = 1,\n    B = 1:8,\n    C = mean(1:8),\n    D = c(1,2,1,2,1,2,1,2),\n    E = rep(1:2,4)\n  )\nbudget3 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 13\n  region product sales_2019 sales_…¹ expen…² expen…³ satis…⁴ satis…⁵     A     B\n  <chr>  <chr>        <dbl>    <dbl>   <dbl>   <dbl> <chr>   <chr>   <dbl> <int>\n1 North  widgets       2129     -517     822    -897 high    very h…     1     1\n2 North  gadgets        723       77    1037    1115 very h… very h…     1     2\n3 South  widgets       1123    -1450    1004     672 high    neutral     1     3\n4 South  gadgets       2022     -945    -610     200 low     low         1     4\n5 East   widgets       -728      -51    -801    -342 very l… very l…     1     5\n6 East   gadgets       -423     -354      94    2036 neutral high        1     6\n7 West   widgets        633      790     783    -315 neutral neutral     1     7\n8 West   gadgets       1204      426     433    -136 low     low         1     8\n# … with 3 more variables: C <dbl>, D <dbl>, E <int>, and abbreviated variable\n#   names ¹​sales_2020, ²​expenses_2019, ³​expenses_2020, ⁴​satisfaction_2019,\n#   ⁵​satisfaction_2020\n```\n:::\n:::\n\n\nMutate with logic operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n\nbudget2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 12\n  region   product sales…¹ sales…² expen…³ expen…⁴ satis…⁵ satis…⁶ sales expen…⁷\n  <chr>    <fct>     <dbl>   <dbl>   <dbl>   <dbl> <chr>   <chr>   <dbl>   <dbl>\n1 North O… widgets    2129    -517     822    -897 high    very h…  1612     -75\n2 North O… gadgets     723      77    1037    1115 very h… very h…   800    2152\n3 South O… widgets    1123   -1450    1004     672 high    neutral  -327    1676\n4 South O… gadgets    2022    -945    -610     200 low     low      1077    -410\n5 East Of… widgets    -728     -51    -801    -342 very l… very l…  -779   -1143\n6 East Of… gadgets    -423    -354      94    2036 neutral high     -777    2130\n7 West Of… widgets     633     790     783    -315 neutral neutral  1423     468\n8 West Of… gadgets    1204     426     433    -136 low     low      1630     297\n# … with 2 more variables: profit <dbl>, profit_category <lgl>, and abbreviated\n#   variable names ¹​sales_2019, ²​sales_2020, ³​expenses_2019, ⁴​expenses_2020,\n#   ⁵​satisfaction_2019, ⁶​satisfaction_2020, ⁷​expenses\n```\n:::\n:::\n\n\n ## summarise\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\n\nhead(budget4) # check the format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n```\n:::\n:::\n\n\n## group_by\n\n\nyear_prod <- budget4 %>%\n  group_by(year, product) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}