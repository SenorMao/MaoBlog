{
  "hash": "6ee03d77caf4c2a5816ea5015d31a11a",
  "result": {
    "markdown": "---\ntitle: \"Data Relations\"\nauthor: \"Emmanuel Pascual\" \ndate: \"3-20-2023\" \n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\ncustomers <- tibble(\n  id = 1:5,\n  city = c(\"Port Ellen\", \"Dufftown\", NA, \"Aberlour\", \"Tobermory\"), \n  Postcode  = c(\"PA42 7DU\", \"AB55 4DH\", NA, \"AB38 7RY\", \"PA75 6NR\")\n  \n)\norders <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)\n```\n:::\n\n\n## What does dplyr mutate do\n\n\n::: {.cell}\n\n```{.r .cell-code}\norders_B <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)\n# add a new column and \norders_B %>%\n          mutate(satisfaction = NA,\n                 number = 1:9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n     id items satisfaction number\n  <dbl> <dbl> <lgl>         <int>\n1     2    10 NA                1\n2     3    18 NA                2\n3     4    21 NA                3\n4     4    23 NA                4\n5     5     9 NA                5\n6     5    11 NA                6\n7     6    11 NA                7\n8     6    12 NA                8\n9     7     3 NA                9\n```\n:::\n\n```{.r .cell-code}\n##reassign to keep it! \n orders_B <- orders_B %>%\n          mutate(satisfaction = NA,\n                 number = 1:9)\n \n###Make numbers into different data type \n orders_B %>% \n  mutate(numbers_as_strings = as.character(number))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n     id items satisfaction number numbers_as_strings\n  <dbl> <dbl> <lgl>         <int> <chr>             \n1     2    10 NA                1 1                 \n2     3    18 NA                2 2                 \n3     4    21 NA                3 3                 \n4     4    23 NA                4 4                 \n5     5     9 NA                5 5                 \n6     5    11 NA                6 6                 \n7     6    11 NA                7 7                 \n8     6    12 NA                8 8                 \n9     7     3 NA                9 9                 \n```\n:::\n\n```{.r .cell-code}\n#You can even do MATHH! \n orders_B %>% \n  mutate(items_minus_id = items - id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n     id items satisfaction number items_minus_id\n  <dbl> <dbl> <lgl>         <int>          <dbl>\n1     2    10 NA                1              8\n2     3    18 NA                2             15\n3     4    21 NA                3             17\n4     4    23 NA                4             19\n5     5     9 NA                5              4\n6     5    11 NA                6              6\n7     6    11 NA                7              5\n8     6    12 NA                8              6\n9     7     3 NA                9             -4\n```\n:::\n:::\n\n\n### SO MANY JOINS FROM LEFT TO RIGHT AND INNER AND EVERYHING!\n\nHere we will look at the two tables and merge the relevant information that we want this way we can draw some conclusions about the data such as how many times were packaged by Postcode, City, and ID number!\n\n![](images/left_join.png){width=\"219\" height=\"159\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###left Join\ncustomers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id city       Postcode\n  <int> <chr>      <chr>   \n1     1 Port Ellen PA42 7DU\n2     2 Dufftown   AB55 4DH\n3     3 <NA>       <NA>    \n4     4 Aberlour   AB38 7RY\n5     5 Tobermory  PA75 6NR\n```\n:::\n\n```{.r .cell-code}\norders\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n     id items\n  <dbl> <dbl>\n1     2    10\n2     3    18\n3     4    21\n4     4    23\n5     5     9\n6     5    11\n7     6    11\n8     6    12\n9     7     3\n```\n:::\n\n```{.r .cell-code}\nleft_data <- left_join(customers, orders, by = \"id\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\nleft_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 4\n     id city       Postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     2 Dufftown   AB55 4DH    10\n3     3 <NA>       <NA>        18\n4     4 Aberlour   AB38 7RY    21\n5     4 Aberlour   AB38 7RY    23\n6     5 Tobermory  PA75 6NR     9\n7     5 Tobermory  PA75 6NR    11\n```\n:::\n\n```{.r .cell-code}\nleft2_data <- left_join(orders, customers, by = \"id\")\n```\n:::\n\n\n![](images/right_join.png){width=\"233\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Right Join\n\ncustomers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id city       Postcode\n  <int> <chr>      <chr>   \n1     1 Port Ellen PA42 7DU\n2     2 Dufftown   AB55 4DH\n3     3 <NA>       <NA>    \n4     4 Aberlour   AB38 7RY\n5     5 Tobermory  PA75 6NR\n```\n:::\n\n```{.r .cell-code}\norders\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n     id items\n  <dbl> <dbl>\n1     2    10\n2     3    18\n3     4    21\n4     4    23\n5     5     9\n6     5    11\n7     6    11\n8     6    12\n9     7     3\n```\n:::\n\n```{.r .cell-code}\nright_data <- right_join(customers, orders, by = \"id\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in right_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\nright_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n     id city      Postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     3 <NA>      <NA>        18\n3     4 Aberlour  AB38 7RY    21\n4     4 Aberlour  AB38 7RY    23\n5     5 Tobermory PA75 6NR     9\n6     5 Tobermory PA75 6NR    11\n7     6 <NA>      <NA>        11\n8     6 <NA>      <NA>        12\n9     7 <NA>      <NA>         3\n```\n:::\n:::\n\n\n![](images/inner_join.png){width=\"272\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Inner Join \ncustomers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id city       Postcode\n  <int> <chr>      <chr>   \n1     1 Port Ellen PA42 7DU\n2     2 Dufftown   AB55 4DH\n3     3 <NA>       <NA>    \n4     4 Aberlour   AB38 7RY\n5     5 Tobermory  PA75 6NR\n```\n:::\n\n```{.r .cell-code}\norders\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n     id items\n  <dbl> <dbl>\n1     2    10\n2     3    18\n3     4    21\n4     4    23\n5     5     9\n6     5    11\n7     6    11\n8     6    12\n9     7     3\n```\n:::\n\n```{.r .cell-code}\ninner_data <- inner_join(customers, orders, by = \"id\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in inner_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\ninner_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n     id city      Postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     3 <NA>      <NA>        18\n3     4 Aberlour  AB38 7RY    21\n4     4 Aberlour  AB38 7RY    23\n5     5 Tobermory PA75 6NR     9\n6     5 Tobermory PA75 6NR    11\n```\n:::\n:::\n\n\n![](images/full_join.png){width=\"270\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##FULL JOIN! ADD EVERYTHING! \nfull_data <- full_join(customers, orders, by = \"id\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in full_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\nfull_data #print data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n      id city       Postcode items\n   <dbl> <chr>      <chr>    <dbl>\n 1     1 Port Ellen PA42 7DU    NA\n 2     2 Dufftown   AB55 4DH    10\n 3     3 <NA>       <NA>        18\n 4     4 Aberlour   AB38 7RY    21\n 5     4 Aberlour   AB38 7RY    23\n 6     5 Tobermory  PA75 6NR     9\n 7     5 Tobermory  PA75 6NR    11\n 8     6 <NA>       <NA>        11\n 9     6 <NA>       <NA>        12\n10     7 <NA>       <NA>         3\n```\n:::\n:::\n\n\n## Dplyr Filter\n\nThis can be very useful when we want specific data to be within our data set in this scenario we are filtering out any values within the city and times columns = NA by using a Boolean variable to check.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_data <- full_join(customers, orders, by = \"id\") #Creates a table where all units of data are brought together, the variables customer,orders, and labeled by ID\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in full_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\nfull_data #print data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n      id city       Postcode items\n   <dbl> <chr>      <chr>    <dbl>\n 1     1 Port Ellen PA42 7DU    NA\n 2     2 Dufftown   AB55 4DH    10\n 3     3 <NA>       <NA>        18\n 4     4 Aberlour   AB38 7RY    21\n 5     4 Aberlour   AB38 7RY    23\n 6     5 Tobermory  PA75 6NR     9\n 7     5 Tobermory  PA75 6NR    11\n 8     6 <NA>       <NA>        11\n 9     6 <NA>       <NA>        12\n10     7 <NA>       <NA>         3\n```\n:::\n\n```{.r .cell-code}\nfull_data%>% \n  filter(Postcode == \"AB38 7RY\", #We want the value data point where postcode == AB38 7RY \n         items > 21) #And for our items to be greater than 21\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n     id city     Postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    23\n```\n:::\n\n```{.r .cell-code}\n##This checks if a value is na \nfull_data %>% \n  filter( is.na(city) == TRUE |\n          is.na(items) == TRUE\n        )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n     id city       Postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     3 <NA>       <NA>        18\n3     6 <NA>       <NA>        11\n4     6 <NA>       <NA>        12\n5     7 <NA>       <NA>         3\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}