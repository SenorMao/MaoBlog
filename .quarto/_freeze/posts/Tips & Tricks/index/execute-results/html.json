{
  "hash": "78bba32b3d1aead56910992176aebd9c",
  "result": {
    "markdown": "---\ntitle: \"Tips and Tricks\"\nauthor: \"Emmanel Pascual\"\ndate: \"2023-02-09\"\ncategories: [Data, Tips, Tricks]\nimage: \"cheatCode.avif\"\n---\n\n\n### Here Comes The Great Tips and Tricks!\n\n?Class = Show Key information on functions you have unpacked already ??Class = Show Key Information On Functions usage and arguments if you don't have it.\n\n###Mean and Counting Tricks##\n\n1:5 is the same as 1,2,3,4,5 rep(x , y) x = Value , Y = instances , Rep = Repetition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYay <- rep(4 , 6)\nYay\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 4 4 4 4 4\n```\n:::\n\n```{.r .cell-code}\nvector1 <- c(1 , 2, 3 , 4, 5, 6 )\nvector2 <- c((8:10))\nvector1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\nvector2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  8  9 10\n```\n:::\n:::\n\n\nc() = combines values into a vector or a list (VECTOR) C( 1 , 2 , 3 )\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMy_number <- c(1, 92, 182)\nMy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1  92 182\n```\n:::\n\n```{.r .cell-code}\n\"We can Change the Vector using this My_number[2] <- 'two' \"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"We can Change the Vector using this My_number[2] <- 'two' \"\n```\n:::\n\n```{.r .cell-code}\nMy_number[2] <- \"two\"\n\"Lets see, background realness darling\" \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Lets see, background realness darling\"\n```\n:::\n\n```{.r .cell-code}\nMy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"   \"two\" \"182\"\n```\n:::\n\n```{.r .cell-code}\n\"Remember when we add quotation marks to any Vectors the entire range becomes Strings & or Characters\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Remember when we add quotation marks to any Vectors the entire range becomes Strings & or Characters\"\n```\n:::\n:::\n\n\nas.numeric() , as.character()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Since R is an interesting language we learned that it does not typecast nor conatonate\" \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Since R is an interesting language we learned that it does not typecast nor conatonate\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(My_number)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1  NA 182\n```\n:::\n\n```{.r .cell-code}\n\"See if we have the string two instead of 2 an interger it doesn't work lets edit that out! \"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"See if we have the string two instead of 2 an interger it doesn't work lets edit that out! \"\n```\n:::\n\n```{.r .cell-code}\nMy_number[2] <- 2 \nas.numeric(My_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1   2 182\n```\n:::\n\n```{.r .cell-code}\n\"Huzzah we did it! \"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Huzzah we did it! \"\n```\n:::\n:::\n\n\nMean(x, trim , na.rm) Trim\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbs <- 1:6\nmean(numbs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n\n```{.r .cell-code}\n\"Trim = Data cleaning process rTrim() is very confusing. What the hell.\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Trim = Data cleaning process rTrim() is very confusing. What the hell.\"\n```\n:::\n\n```{.r .cell-code}\nmean(numbs , .1 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n:::\n\n\nSample function is random selection Sample (x , size , replace = FALSE Prob = Rep (â…™ , 6) Everything Sample makes a selection it wants to know what the probability is thats when the REP function comes into play.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndice <- c(1:6)\ndice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\nsample(dice, 6, replace = FALSE, prob = rep(1/6, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1 5 4 3 6\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}