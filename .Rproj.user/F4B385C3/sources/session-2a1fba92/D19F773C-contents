---
title: "Week 3 Assignment"
author: "Emmanuel Pascual"
date: "2023-02-21"
categories: [Data, Tips, Tricks]
image: "cheatCode.avif"
execute: 
  echo: false
  jupyter: python3 
---

1.  **Be able to make a new .qmd document Sign top left Create new Quarto Document**

-   Save \> Find the posts -\> Only use Source Editor -\>

-   Files tab make Quarto Doc it makes it in the folder you're in and they're blank

-   Top level, it gives reference to what the post is about

2.  **Be able to render a .qmd document!**

-   Yes We can render the whole website too! Render a page from the console using commands.

3.  **Explain the difference between the source editor view and visual editor view in Rstudio**

-   Source View is plain test (ASCII character will be expressed exactly as it is in the source view)

-   Visual View Renders the plain text and interprets it as Markdown text, it gives the text formatting text instead of the plain test.

4.  **Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.**

Headers:

# Header 1

## Header 2

### Header 3

#### Header 4

##### Header 5

###### Header 6

The smaller we get the smaller the header will end up being.

Lists:

*-* unordered list + sub-item 1 + sub-item 2 - sub-sub-item 1

1.  ordered list
2.  item 2
    i)  sub-item 1
        A.  sub-sub-item 1 Paragraphs:

*italics* and **bold**

Plain text End a line with two spaces to start a new paragraph. *italics* and *italics* **bold** and **bold** superscript^2^ ~~strikethrough~~

Paragraphs:

5.  **Be aware of resources to help you learn more about markdown options.**

https://quarto.org/docs/authoring/markdown-basics.html

6.  **Be able to insert an R code chunk, and show the output in the rendered document.**

-   macro for quick insert ctrl - alt - I

```{R}
  summonMe <- c(1, 2, 3 , 4:6)
  summonMe
```

7.  **Running R code chunks in a qmd**

-   pressing play
-   copy/paste into console
-   highlight then command-enter (mac)
-   precedence issues (first to last)

```{R}
name <- "Emily"
age <- 36
today <- Sys.Date()
christmas <- as.Date("2023-12-25")
```

8.  **Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.**

https://quarto.org/docs/computations/execution-options.html

9.  **Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)**

10. Write inline r code.

```{R}
name <- "Emily"
age <- 36
today <- Sys.Date()
christmas <- as.Date("2023-12-25")


```

"My name is `r name` and I am `r age` years old. It is `r christmas - today` days until Christmas, which is my favourite holiday."

11. **Explain how the rendering environment is different from the Rstudio environment.**

The RStudio environment is where you write, edit, and execute R code. This is where you interact with your data, create plots, and develop your analysis. The RStudio environment provides many tools to help you write and run code, such as code highlighting, debugging tools, and a console for executing commands.

The rendering environment, on the other hand, is where R Markdown documents are processed and turned into output formats like HTML, PDF, or Word. When you click the "Knit" button in RStudio, your R Markdown document is processed in the rendering environment, which executes the R code, generates output, and produces a final document in the desired output format.

12. **Be aware of more advanced quarto options for html documents, and try some of the options.**

With Quarto you're able to utilize HTML/CSS using specific special words inside of your opening brackets where you put your author,date, theme, and tags to name a few.

Table of contents: Quarto can automatically generate a table of contents for your HTML document based on the headings in the document. You can customize the appearance and behavior of the table of contents using CSS styles and configuration options.

Custom CSS: You can use custom CSS to style the HTML output. To do this, create a file called custom.css and add your custom styles to it. Then, include the following in your YAML header:
