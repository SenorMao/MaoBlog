---
title: "What does DPLYR DO? Left Joins or Right Joins"
author: "Emmanuel Pascual" 
date: "4-18-2023" 
---

```{r}
library(tidyverse)
1:5
customers <- tibble(
  id = 1:5,
  city = c("Port Ellen", "Dufftown", NA, "Aberlour", "Tobermory"), 
  Postcode  = c("PA42 7DU", "AB55 4DH", NA, "AB38 7RY", "PA75 6NR")
  
)
orders <- tibble(
  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)

```

## What does dplyr mutate do

```{r}
orders_B <- tibble(
  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
# add a new column and 
orders_B %>%
          mutate(satisfaction = NA,
                 number = 1:9)

##reassign to keep it! 
 orders_B <- orders_B %>%
          mutate(satisfaction = NA,
                 number = 1:9)
 
###Make numbers into different data type 
 orders_B %>% 
  mutate(numbers_as_strings = as.character(number))
 
#You can even do MATHH! 
 orders_B %>% 
  mutate(items_minus_id = items - id)
 


```

### SO MANY JOINS FROM LEFT TO RIGHT AND INNER AND EVERYHING!

Here we will look at the two tables and merge the relevant information that we want this way we can draw some conclusions about the data such as how many times were packaged by Postcode, City, and ID number!

![](images/left_join.png){width="219" height="159"}

```{r}
###left Join
customers
orders
left_data <- left_join(customers, orders, by = "id")
left_data


left2_data <- left_join(orders, customers, by = "id")


```

![](images/right_join.png){width="233"}

```{r}
##Right Join

customers
orders

right_data <- right_join(customers, orders, by = "id")
right_data
```

![](images/inner_join.png){width="272"}

```{r}
##Inner Join 
customers
orders
inner_data <- inner_join(customers, orders, by = "id")
inner_data
```

![](images/full_join.png){width="270"}

```{r}
##FULL JOIN! ADD EVERYTHING! 
full_data <- full_join(customers, orders, by = "id") 
full_data #print data
```

## Dplyr Filter

This can be very useful when we want specific data to be within our data set in this scenario we are filtering out any values within the city and times columns = NA by using a Boolean variable to check.

```{r}
full_data <- full_join(customers, orders, by = "id") #Creates a table where all units of data are brought together, the variables customer,orders, and labeled by ID
full_data #print data

full_data%>% 
  filter(Postcode == "AB38 7RY", #We want the value data point where postcode == AB38 7RY 
         items > 21) #And for our items to be greater than 21


##This checks if a value is na 
full_data %>% 
  filter( is.na(city) == TRUE |
          is.na(items) == TRUE
        )
```
