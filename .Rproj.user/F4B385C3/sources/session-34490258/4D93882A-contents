---
title: "Midterm"
author: "Emmanel Pascual"
toc-title: Contents
toc: true
toc-depth: 2
date: "2023-03-31"
categories: [Midterm, Psychology, Data]
image: ""
---

Write a blog post where you demonstrate your ability to use these basic programming concepts in R.

1.  R objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)

2.  Logical operations: show that you understand and can use logical operators in R (e.g., == \| \> \< \>= \<=)

3.  Loops: Show that you understand the components of a for loop, and that you can use a for loop.

4.  Functions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does).

5.  When using R there are objects that are utilized in the representation and assigning of values, to create an object you will want to use the assignment operator which looks like this " \<-" to assign a variable/object with information that being either of the character/string, numeric values, integers, logical reasoning which are booleans true or false values, a data.frame is used to store a large set of values into a section that can later be called to create GGPLOT graphs and visualizations. 

```{r}
a <- 1 
a 
typeof(a)
is.integer(a)


 b <- integer(length = 5)
is.integer(b)
lubridate::today()
```

```{r}
typeof(TRUE)
class(FALSE)
is.logical(1)
as.logical(0)
logical(length = 5)
```

```{r}
my_df <- data.frame( a = 1:5,
                     b = c("one","two","three","four","five"),
                     random = runif(5,0,1))
#print to see
my_df
my_df$a == 1:5
my_df$b
##access rows 
my_df[1,] #row 1, all columns
my_df[,1] # columns, all rows 
my_df[1:2,] # rows 1 to 2, all columns
my_df[1:2,3] #rows 1 to 2 , but only for column 3 
```

2.  This will always equal equivalence, between two variables if you want to set certain conditions then we can use "\>" or "\<" to decide how R would proceed with the code for instance these are particularly useful when used in unison with For Loops and While loops, these will be the conditions in determining if we stay within the loop or exit the loops. \<= would be if a value is less than or equal to execute the following, \>= would be if a value is more than or equal to a value then execute the following code. 

    ```{r}

    ```

3.  Loops are used to repeat a set of code until a certain requirement is met and or/if a variable is set to true or false. We utilize this to cut down on repeating code and here is an example. I set the condition to be when a is less that 5 we will have "Seems we are still under 5" and the value of the variable "a" will increment up, until it is 6 where

```{r}

{a = 0}
while (a <= 5){
  
  print("seems we are still under 5")
  
  a = a + 1
}
print("Looks like you finally got out of that loop")

print(a)
```

    [1] "seems we are still under 5"
    [1] "seems we are still under 5"
    [1] "Looks like you finally got out of that loop"
    [1] 5

4.   Functions are neat preset code that will take the inputs and return some sort of number/value depending on said functions there are many functions within the R library but I believe these are the most common and will have them listed here along with an example. 

-   sum(): This function is used to calculate the sum of a vector or a matrix.

-   mean(): This function is used to calculate the mean of a vector or a matrix

-   sd(): This function is used to calculate the standard deviation of a vector or a matrix.

```{r}
sum(c(1, 2, 3, 4))
mean(c(1, 2, 3, 4)) 
sd(c(1, 2, 3, 4)) 
```

-   length(): This function is used to calculate the length of a vector.

-   max(): This function is used to find the maximum value in a vector or a matrix.

-   min(): This function is used to find the minimum value in a vector or a matrix.

```{r}
length(c(1, 2, 3, 4))
max(c(1, 2, 3, 4))
min(c(1, 2, 3, 4))
```

-   sort(): This function is used to sort a vector in ascending order.

-   rev(): This function is used to reverse the order of a vector.

-   round(): This function is used to round off a number to a specific number of decimal places. For example,

-   paste(): This function is used to concatenate two or more strings.

```{r}
sort(c(4, 2, 1, 3)) 
rev(c(1, 2, 3, 4)) 
round(3.14159, 2) 
paste("Hello", "world!") 
```

\`\`\`
